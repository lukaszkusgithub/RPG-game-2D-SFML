cmake_minimum_required(VERSION 3.15)
set(PROJECT_NAME RPG)

project(${PROJECT_NAME})


set(CMAKE_CXX_STANDARD 17)

file(GLOB source_files
        game
        *.cpp
        *.h
        Characters/*.cpp
        Characters/*.h
        States/*.cpp
        States/*.h
        Enemies/*.cpp
        Enemies/*.h
        NPC/*.cpp
        NPC/*.h
        GUI/*.cpp
        GUI/*.h)

set(SOURCES ${source_files})

set(CMAKE_CXX_STANDARD 11)

# Detect and add SFML
set(SFML_STATIC_LIBRARIES TRUE)
set(SFML_DIR "SFML/build/")
#set(SFML_INCLUDE_DIR "/SFML/include")

include_directories(SFML_DIR)
#include_directories(SFML_INCLUDE_DIR)

set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake_modules" ${CMAKE_MODULE_PATH})

find_package(SFML REQUIRED COMPONENTS audio graphics window system)

add_executable(${PROJECT_NAME} ${SOURCES})

#target_include_directories(${PROJECT_NAME} PRIVATE "include" "lib")
#
#target_link_libraries(${PROJECT_NAME} sfml-system sfml-window sfml-graphics sfml-audio)


# LOCAL
#set(SFML_INCLUDE_DIR "./SFML/include")
#set(SFML_LIBRARY_DIR "./SFML/build/src")
#
#link_directories(SFML_LIBRARY_DIR)
#include_directories(SFML_INCLUDE_DIR)


#find_package(SFML 2.5.1 COMPONENTS system window graphics network audio)
#target_link_libraries (game sfml-graphics sfml-window sfml-system sfml-audio)
#
#target_link_libraries(${PROJECT_NAME} sfml-system sfml-window sfml-graphics sfml-audio)

#if (UNIX)
#    target_link_libraries(${PROJECT_NAME} pthread)
#endif (UNIX)


## Copy data dir to the binary directory
#file(COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
#
#if(MSVC)
#    foreach(lib ${SFML_LIBS})
#        get_target_property(lib_path ${lib} LOCATION)
#        file(COPY ${lib_path} DESTINATION ${CMAKE_CURRENT_BINARY_DIR})
#    endforeach()
#endif(MSVC)

